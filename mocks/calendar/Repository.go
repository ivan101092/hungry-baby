// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	calendar "hungry-baby/businesses/calendar"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, tokenString, calendarDomain
func (_m *Repository) Add(ctx context.Context, tokenString string, calendarDomain *calendar.Domain) (calendar.Domain, error) {
	ret := _m.Called(ctx, tokenString, calendarDomain)

	var r0 calendar.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, *calendar.Domain) calendar.Domain); ok {
		r0 = rf(ctx, tokenString, calendarDomain)
	} else {
		r0 = ret.Get(0).(calendar.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *calendar.Domain) error); ok {
		r1 = rf(ctx, tokenString, calendarDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, tokenString, id
func (_m *Repository) Delete(ctx context.Context, tokenString string, id string) error {
	ret := _m.Called(ctx, tokenString, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, tokenString, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, tokenString, search, startAt, endAt, pageToken, limit
func (_m *Repository) FindAll(ctx context.Context, tokenString string, search string, startAt string, endAt string, pageToken string, limit int) ([]calendar.Domain, error) {
	ret := _m.Called(ctx, tokenString, search, startAt, endAt, pageToken, limit)

	var r0 []calendar.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, int) []calendar.Domain); ok {
		r0 = rf(ctx, tokenString, search, startAt, endAt, pageToken, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]calendar.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, int) error); ok {
		r1 = rf(ctx, tokenString, search, startAt, endAt, pageToken, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, tokenString, id
func (_m *Repository) FindByID(ctx context.Context, tokenString string, id string) (calendar.Domain, error) {
	ret := _m.Called(ctx, tokenString, id)

	var r0 calendar.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string) calendar.Domain); ok {
		r0 = rf(ctx, tokenString, id)
	} else {
		r0 = ret.Get(0).(calendar.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tokenString, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	file "hungry-baby/businesses/file"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, fileDomain
func (_m *Usecase) Delete(ctx context.Context, fileDomain *file.Domain) (file.Domain, error) {
	ret := _m.Called(ctx, fileDomain)

	var r0 file.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *file.Domain) file.Domain); ok {
		r0 = rf(ctx, fileDomain)
	} else {
		r0 = ret.Get(0).(file.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *file.Domain) error); ok {
		r1 = rf(ctx, fileDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Usecase) FindByID(ctx context.Context, id int) (file.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 file.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) file.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(file.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, fileDomain
func (_m *Usecase) Store(ctx context.Context, fileDomain *file.Domain) (file.Domain, error) {
	ret := _m.Called(ctx, fileDomain)

	var r0 file.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *file.Domain) file.Domain); ok {
		r0 = rf(ctx, fileDomain)
	} else {
		r0 = ret.Get(0).(file.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *file.Domain) error); ok {
		r1 = rf(ctx, fileDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: ctx, types, filePath, f
func (_m *Usecase) Upload(ctx context.Context, types string, filePath string, f *multipart.FileHeader) (file.Domain, error) {
	ret := _m.Called(ctx, types, filePath, f)

	var r0 file.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *multipart.FileHeader) file.Domain); ok {
		r0 = rf(ctx, types, filePath, f)
	} else {
		r0 = ret.Get(0).(file.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, types, filePath, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: objectName
func (_m *Repository) Delete(objectName string) error {
	ret := _m.Called(objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFile provides a mock function with given fields: objectName
func (_m *Repository) GetFile(objectName string) (string, error) {
	ret := _m.Called(objectName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: path, file
func (_m *Repository) Upload(path string, file *multipart.FileHeader) (string, error) {
	ret := _m.Called(path, file)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *multipart.FileHeader) string); ok {
		r0 = rf(path, file)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *multipart.FileHeader) error); ok {
		r1 = rf(path, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

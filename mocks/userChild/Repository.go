// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	userChild "hungry-baby/businesses/userChild"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, userChildDomain
func (_m *Repository) Delete(ctx context.Context, userChildDomain *userChild.Domain) (userChild.Domain, error) {
	ret := _m.Called(ctx, userChildDomain)

	var r0 userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *userChild.Domain) userChild.Domain); ok {
		r0 = rf(ctx, userChildDomain)
	} else {
		r0 = ret.Get(0).(userChild.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userChild.Domain) error); ok {
		r1 = rf(ctx, userChildDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, search, userID, page, perpage
func (_m *Repository) Find(ctx context.Context, search string, userID int, page int, perpage int) ([]userChild.Domain, int, error) {
	ret := _m.Called(ctx, search, userID, page, perpage)

	var r0 []userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int) []userChild.Domain); ok {
		r0 = rf(ctx, search, userID, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userChild.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, int) int); ok {
		r1 = rf(ctx, search, userID, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int, int) error); ok {
		r2 = rf(ctx, search, userID, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAll provides a mock function with given fields: ctx, search, userID
func (_m *Repository) FindAll(ctx context.Context, search string, userID int) ([]userChild.Domain, error) {
	ret := _m.Called(ctx, search, userID)

	var r0 []userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []userChild.Domain); ok {
		r0 = rf(ctx, search, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userChild.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, search, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *Repository) FindByID(ctx context.Context, id int) (userChild.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) userChild.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(userChild.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, userChildDomain
func (_m *Repository) Store(ctx context.Context, userChildDomain *userChild.Domain) (userChild.Domain, error) {
	ret := _m.Called(ctx, userChildDomain)

	var r0 userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *userChild.Domain) userChild.Domain); ok {
		r0 = rf(ctx, userChildDomain)
	} else {
		r0 = ret.Get(0).(userChild.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userChild.Domain) error); ok {
		r1 = rf(ctx, userChildDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, userChildDomain
func (_m *Repository) Update(ctx context.Context, userChildDomain *userChild.Domain) (userChild.Domain, error) {
	ret := _m.Called(ctx, userChildDomain)

	var r0 userChild.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *userChild.Domain) userChild.Domain); ok {
		r0 = rf(ctx, userChildDomain)
	} else {
		r0 = ret.Get(0).(userChild.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *userChild.Domain) error); ok {
		r1 = rf(ctx, userChildDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
